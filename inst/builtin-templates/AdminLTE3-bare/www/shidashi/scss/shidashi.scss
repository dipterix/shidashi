@use "sass:meta";
@use "sass:map";

/** variables from AdminLTE **/
$lightblue: #86bad8;
$navy: #002c59;
$olive: #74c8a3;
$lime: #67ffa9;
$fuchsia: #f672d8;
$maroon: #ed6c9b;
$blue: #3f6791;
$indigo: #6610f2;
$purple: #6f42c1;
$pink: #e83e8c;
$red: #e74c3c;
$orange: #fd7e14;
$yellow: #f39c12;
$green: #00bc8c;
$teal: #20c997;
$cyan: #3498db;
$white: #fff;
$gray: #6c757d;
$gray-dark: #343a40;
$primary: #3f6791;
$secondary: #6c757d;
$success: #00bc8c;
$info: #3498db;
$warning: #f39c12;
$danger: #e74c3c;
$light: #f8f9fa;
$light-gray: #c8c9ca;
$dark: #343a40;
$light-dark: #454d55;

/** global variables **/
$sizes-margin-padding: 0,1,2,3,4,5,6,7,8,9,10,11,12,15,20,25,30,50,60,80,100;
$code-background: #e5e5e5;
$code-color-operator: rgb(104, 118, 135);
$code-color-parenthesis: rgb(104, 118, 135);
$code-color-literal: #990073;
$code-color-number: #099;
$code-color-comment: #098;
$code-color-keyword: #900;
$code-color-identifier: rgb(0, 0, 0);
$code-color-string: #d14;
$code-font-family: "'DejaVu Sans Mono', 'Droid Sans Mono', 'Lucida Console', Consolas, Monaco, monospace";
$color-error: #dc3545;


/** Some macros **/
@function add_force($force: false) {
  $important: "";
  @if $force {
    $important: "!important";
  }
  @return unquote($string: $important);
}
@function as_pixel_size($sizes...){
  $args : meta.keywords($sizes);
  $size : map.get($args, "size");
  @if not $size or $size == 0 {
    @return 0;
  }
  $unit: map.get($args, "unit");
  @if not $unit {
    $unit: 1px;
  }
  @return $size * $unit;
}
@mixin display($type, $force: false) {
  display: $type add_force($force);
}
@mixin visibility($type, $force: false) {
  visibility: $type add_force($force);
}
@mixin position($type, $force: false) {
  position: $type add_force($force);
}
@mixin set-size($type, $direction: all, $force: false, $sizes...) {
  $style: as_pixel_size($sizes...) add_force($force);
  @if $direction == all {
    #{$type}: $style;
  } @else {
    @each $d in $direction {
      @if $d == vertical {
        #{$type}-top: $style;
        #{$type}-bottom: $style;
      } @else if $d == horizontal {
        #{$type}-left: $style;
        #{$type}-right: $style;
      } @else {
        #{$type}-#{$d}: $style;
      }
    }
  }
}
@mixin margin($direction: all, $force: false, $sizes...){
  @include set-size($type : margin, $sizes...,
    $direction: $direction, $force: $force);
}
@mixin padding($direction: all, $force: false, $sizes...){
  @include set-size($type : padding, $sizes...,
    $direction: $direction, $force: $force);
}
@mixin min-height($size){ min-height: as_pixel_size($size: $size); }
@mixin max-height($size){ max-height: as_pixel_size($size: $size); }
@mixin height($size){ height: as_pixel_size($size: $size); }
@mixin fill-width { width: 100%; }
@mixin fill-height { height: 100%; }
@mixin fill-max-width { max-width: 100%; }
@mixin fill-max-height { max-height: 100%; }
@mixin overflow($type, $direction: all, $force: false) {
  @if $direction == all {
    overflow: $type add_force($force);
  } @else {
    overflow-#{$direction}: $type add_force($force);
  }
}
@mixin code-font-family { font-family: unquote($string: $code-font-family); }
@mixin border-radius($size, $unit: 1px) {
  border-radius: as_pixel_size($size: $size, $unit: $unit);
}
@mixin border-color($color, $direction: all) {
  @if $direction == all {
    border-color: $color;
  } @else {
    @each $d in $direction {
      border-#{$d}-color: $color;
    }
  }
}

/** Some misc first **/
.theme-switch {
  display: inline-block;
  height: 24px;
  position: relative;
  width: 50px;
}

.theme-switch input {
  display: none;
}

.slider {
  background-color: #ccc;
  bottom: 0;
  cursor: pointer;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  transition: 400ms;
}

.slider::before {
  background-color: #fff;
  bottom: 4px;
  content: "";
  height: 16px;
  left: 4px;
  position: absolute;
  transition: 400ms;
  width: 16px;
}

input:checked + .slider {
  background-color: #66bb6a;
}

input:checked + .slider::before {
  transform: translateX(26px);
}

.slider.round {
  border-radius: 34px;
}

.slider.round::before {
  border-radius: 50%;
}

/** General rules: display, visibility **/
.hidden {
  @include display(none, true);
  @include visibility(hidden, true);
}
.soft-hidden {
  height: 0!important;
  overflow: hidden!important;
}

.display-block-force {
  @include display(block, true);
}

.display-block {
  @include display(block, true);
}

.inline-all {
  @include display(inline, true);

  & * {
    @include display(inline, true);
  }
  & pre,
  & code {
    padding: 0;
    margin: 0;
  }
}

.flex-container {
  display: flex;
  @include fill-width;

  &>* {
    flex: 1;
  }
}
.flex-break {
  flex-basis: 100%;
}

@each $type in hidden, auto, visible, scroll {
  .overflow-#{$type} {
    @include overflow($type);
  }
  @each $d in x, y {
    .overflow-#{$d}-#{$type} {
      @include overflow($type, $d);
    }
  }
}

// larger scroll corner so when cards expand, we still have room to resize
.os-theme-thin-light > .os-scrollbar-corner {
  height: 28px;
  width: 28px;
}

.overflow-visible-on-hover {
  @include overflow(hidden);

  &:hover {
    @include overflow(visible);
    @include position(absolute);
    min-height: 100%;
    min-width: 100%;
    z-index: 10000;
  }
}

/** General rules: dimensions **/
@for $factor from 1 through 12 {
  .row .col-sm-#{$factor}>.shiny-bound-input {
    @include fill-width();
  }
}

.fill {
  @include fill-width();
  @include fill-height();
}
.fill-width {
  @include fill-width();

  & > .shiny-input-container,
  & > .shiny-output-container {
    width: 100%;
  }
}
.fill-height { @include fill-height(); }
.fill-min {
  min-width: 100%;
  min-height: 100%;
}
.fill-min-height { min-height: 100%; }
.fill-min-width { min-width: 100%; }

@for $factor from 0 through 20 {
  $size: $factor * 50;
  .min-height-#{$size} { @include min-height($size: $size); }
  .max-height-#{$size} { @include max-height($size: $size); }
  .height-#{$size} { @include height($size: $size); }
}


/** General rules: margin, padding **/
@each $size in $sizes-margin-padding {
  $types: padding, margin;
  @each $type in $types {
    .#{$type}-#{$size} { #{$type}: as_pixel_size($size: $size); }
    .#{$type}-top-#{$size} { #{$type}-top: as_pixel_size($size: $size); }
    .#{$type}-bottom-#{$size} { #{$type}-bottom: as_pixel_size($size: $size); }
    .#{$type}-vertical-#{$size} { #{$type}-top: as_pixel_size($size: $size); #{$type}-bottom: as_pixel_size($size: $size); }
    .#{$type}-left-#{$size} { #{$type}-left: as_pixel_size($size: $size); }
    .#{$type}-right-#{$size} { #{$type}-right: as_pixel_size($size: $size); }
    .#{$type}-horizontal-#{$size} { #{$type}-right: as_pixel_size($size: $size); #{$type}-left: as_pixel_size($size: $size); }
  }
}

.no-padding { padding: 0!important; }
.no-margin { margin: 0!important; }


.shiny-output-error-validation {
  text-align: center;
}

.no-padding > .shiny-output-error {
  padding: 0.75rem 1.25rem;
}

.space-vertical-5 {
  width: 100%;

  &::before {
    content: " ";
    display: block;
    height: 5px;
  }
}

.resize-vertical {
  @include overflow(hidden);
  resize: vertical;

  &:hover {
    @include overflow(auto);
  }

  & .os-content {
    min-height: 100%;
  }
}

/** Colors **/

@for $factor from 0 through 9 {
  $tmp: adjust-color($color: #000000, $lightness: $factor * 10%);
  .bg-gray-#{$factor}0 {
    background-color: $tmp;
  }
  @each $d in bottom, top, lef, right {
    .border-#{$d}-gray#{$factor}0 {
      border-#{$d}: 1px solid $tmp;
    }
  }
  .opacity-0#{$factor} {
    opacity: $factor * 0.1;
  }
}
.opacity-10 { opacity: 1; }

/** Syntax highlight for R code **/
pre {
  @include code-font-family;
  @include overflow(auto, x);
  @include fill-max-width;
  background-color: $code-background;

  & .operator { color: $code-color-operator; }
  & .paren { color: $code-color-parenthesis; }
  & .literal { color: $code-color-literal; }
  & .number { color: $code-color-number; }
  & .comment { color: $code-color-comment; font-style: italic; }
  & .keyword { color: $code-color-keyword; font-weight: bold; }
  & .identifier { color: $code-color-identifier; }
  & .string { color: $code-color-string; }

  &.pre-compact {
    white-space: normal;

    & code {
      white-space: break-spaces;
    }
  }

  &.overflow-visible-on-hover:hover {
    max-width: unset;
    box-shadow: 0 0 50px rgba(0, 0, 0, 0.125), 0 1px 50px rgba(0, 0, 0, 0.2);
  }

}
tt, code {
  @include code-font-family;
}

pre, code {
  @include display(block);
  @include padding($size: 0.5, $unit: 1em);

  &[class] {
    font-size: 92% !important;
  }
}

/** shidashi objects **/
// navbar-nav-iframe (iframe tablist)

body.navbar-iframe-hidden .navbar-nav-iframe {
  display: none;
}
body.iframe-mode-fullscreen .navbar-nav-iframe {
  display: flex;
}

.content-wrapper.iframe-mode {
  max-height: calc(-56px + 100vh);

  &>.tab-content {
    min-height: calc(-57px + 100vh);

    & .tab-empty,
    & .tab-pane,
    & .tab-pane > iframe {
      min-height: calc(-57px + 100vh);
    }
  }
}

section.module_main_ui .screen-height {
  max-height: calc(100vh - 73px);
  overflow-y: hidden;

  @each $type in auto, visible, scroll {
    &.overflow-#{$type} {
      @include overflow($type);
    }
    @each $d in x, y {
      &.overflow-#{$d}-#{$type} {
        @include overflow($type, $d);
      }
    }
  }
}

body.iframe-mode section.module_main_ui .screen-height {
  max-height: calc(100vh - 32px);
}

.content-header {
  padding: 0.5rem;
}

body {
  background-color: $light;

  &.dark-mode {
    background-color: $light-dark;
  }
}

body.navbar-iframe-hidden .content-wrapper.iframe-mode {
  max-height: calc(-56px + 100vh);

  &>.tab-content {
    min-height: calc(-57px + 100vh);

    & .tab-empty,
    & .tab-pane,
    & .tab-pane > iframe {
      min-height: calc(-57px + 100vh);
    }
  }
}

body.iframe-mode-fullscreen .content-wrapper.iframe-mode {
  max-height: 100vh;
}

.navbar-nav-iframe {
  padding: 0;
  padding-top: 1px;

  ul.navbar-nav[role="tablist"]>li.nav-item>.nav-link {
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
  }

  &.navbar-dark ul.navbar-nav[role="tablist"]>li.nav-item {
    &:hover {
      background-color: adjust-color($color: $dark, $lightness: 3%);
    }
    &>.nav-link.active {
      background-color: $light-dark;
    }
  }
}

.navbar-expand .navbar-nav .nav-link {
  padding-right: 0.8rem;
  padding-left: 0.8rem;
}


// Sidebar-related

.nav-sidebar .nav-header.nav-divider {
  display: flex;
  color: $light-gray;

  &::before,
  &::after {
    content: " ";
    border-top: 1px solid $light-gray;
    width: auto;
    display: block;
    transform: translate(0, 50%);
    flex: 1 1 1em;
  }
  & > span {
    flex: 1;
    padding: 0 12px;
    text-align: center;
    display: ruby;
  }
}

body.dark-mode .nav-sidebar .nav-header.nav-divider {
  color: $light-dark;

  &::before,
  &::after {
    border-top: 1px solid $light-dark;
  }
}

.sidebar-collapse .nav-sidebar .nav-header.nav-divider {
  text-align: right;
  &::before {
    border-top: transparent!important;
  }
}

.back-to-top [role="group"] {
  opacity: 0.4;
  transition: opacity 200ms;
  z-index: 10000;

  &.show,
  &:hover {
    opacity: 1;
  }
}

// code-display
.info-box {
  & .code-display {
    @include padding($size: 0);
    @include margin($size: -0.5, $unit: 1em);
  }
  & .info-box-content {
    @include fill-width();
  }
}

.code-display pre {
  @include padding($size: 0);
}

.card-footer.code-display .info-box {
  @include border-radius(0);
}

// card-accordion
.card-accordion {
  &.catd-tools {
    @include position($type: absolute);
    right: 0;
    margin: 7px 5px; // TODO: change this
  }
  &.card-header {
    @include padding($size: 0);
    @include position($type: relative);

    & .card-accordion-title {
      @include padding($size: 10);
    }

    & [data-toggle="collapse"] {
      cursor: pointer;
    }
  }
}

// card2
.card2-body {
  @include overflow(hidden, x);

  & .direct-chat-contacts hr {
    @include border-color( rgb(232,232,232), top );
  }
}

// group input box
.group-input-box {
  border: 1px dashed $light-gray;
  padding-top: 0.6rem;
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
  position: relative;

  &::before {
    content: attr(title);
    position: absolute;
    margin-top: -1.5rem;
    left: 0.4rem;
    color: $gray; // $light-dark;
    background-color: $light;
    padding: 0.1rem 0.4rem;
  }
}
.dark-mode .group-input-box {
  border: 1px dashed $light-dark;
  &::before {
    color: $light-gray;
    background-color: $light-dark;
  }
}

// progress-bar
.progress-error { @include display(none, true); }
.progress-message { @include display(block); }
.shidashi-progress-error {
  & .progress-error {
    @include display(block, true);
    color: $color-error !important;
  }
  & .progress-message {
    @include display(none);
  }
  & .progress-bar {
    background-color: $color-error !important;
  }
}

// flip-box
.flip-box {
  background-color: transparent;
  border: none;
  perspective: 1000px;
  padding: 0 !important;
  position: relative;

  &[data-toggle="click"] .flip-box-front,
  &[data-toggle="click-front"] .flip-box-front {
    cursor: pointer;
  }

  & .flip-box-inner {
    position: relative;
    width: 100%;
    margin: 0 !important;
    padding: 0 !important;
    transition: transform 0.5s;
    transition-timing-function: cubic-bezier(1, 0, 1, 1);
    transform-style: preserve-3d;

    & .flip-box-front,
    & .flip-box-back {
      width: 100%;
      margin: 0 !important;
      padding: 0 !important;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
    }
    & .flip-box-front {
    	position: relative;
      transform: rotateY(360deg);
    }
    & .flip-box-back {
      position: absolute;
      z-index: 9999;
      transform: rotateY(180deg);
    }
  }

  &.fill .flip-box-inner,
  &.fill .flip-box-front {
    @include fill-height();
    @include fill-width();
  }

  &.active {
    z-index: 1;
  }
  &.active .flip-box-inner {
    transform: rotateY(180deg);
  }
}

.card-body .flip-box {
  & .flip-box-inner .flip-box-back {
    max-height: 100%;
    max-width: 100%;
    &, & * {
      overflow: hidden;
    }
  }
  &.active .flip-box-inner .flip-box-back {
    overflow-y: auto;
  }
}

// shiny-notification
#shiny-notification-panel {
  width: 350px;
  background-clip: padding-box;
  bottom: 70px;
  @include border-radius(0.25, 1rem);

  & .shiny-notification-close {
    @include visibility(hidden);
    color: #adb5bd;
    font-size: 24px;
  }

  & .shiny-notification {
    background-color: rgba(52,58,64);
    border: 1px solid rgba(0,0,0,0.1);
    box-shadow: 0 .25rem .75rem rgba(0,0,0,.1);
    color: #fff;
    opacity: 0.9;

    & .progress {
      height: 3px;
      background: #eee;
      margin-top: 24px;
      margin-bottom: -30px;

      & .progress-bar {
        background: $primary;
      }
    }

    & .progress-text .progress-message {
      display: block;
      margin-bottom: 10px;
      width: 100%;
      height: 20px;
      overflow: clip;
      text-overflow: clip;
    }
  }
}

body.dark-mode #shiny-notification-panel .shiny-notification {
  background-color: rgba(255,255,255);
  color: #1f2d3d;
}

/* Additional shiny styles */
.dark-mode {
  & .selectize-control {
    & .selectize-input,
    & .selectize-dropdown {
      background-color: $dark !important;
      color: $white !important;
    }

    & .selectize-input {
      border-color: $gray !important;
      &::after {
        border-color: $gray transparent transparent transparent !important;
      }
      &.dropdown-active::after {
        border-color: transparent transparent $gray transparent !important;
      }
    }

    &.multi .selectize-input > div {
      background-color: $gray;
      color: $white;
    }
  }
}




/* Shiny input & output fixes */
.checkbox,
.radio,
.shiny-input-radiogroup .shiny-options-group {
  & label {
    margin-bottom: 0;

    &, & span {
      font-weight: 300;
    }
  }
}

fieldset,
.form-control,
.form-group,
.shiny-input-container:not(.shiny-input-container-inline) {
  width: 100%;
}
.form-group {
  margin-bottom: 0.8rem;
}

.dipsaus-compound-input {
  & .bootstrap-select .dropdown-toggle[role="combobox"] {
    white-space: normal;
    overflow-wrap: break-word;
    word-break: break-word;
  }
}

.irs--shiny .irs-from, .irs--shiny .irs-to, .irs--shiny .irs-single {
  color: inherit;
  padding: 0 3px;
  background-color: transparent;
  border: transparent;
}
.dark-mode .irs--shiny .irs-grid-pol {
  background-color: $white;
}

.toggle-advance-options {
  color: $gray;

  &:hover {
    color: #0056b3;
  }
}

.col-xs-12 {
  -webkit-flex: 0 0 100%;
  -ms-flex: 0 0 100%;
  flex: 0 0 100%;
  max-width: 100%;

  position: relative;
  width: 100%;
  padding-right: 7.5px;
  padding-left: 7.5px;
}
